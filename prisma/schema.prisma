datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  followedBy    Follows[] @relation("following")
  following     Follows[] @relation("follower")
  likes         Like[]
  saves         Save[]

  chatIds String[] @db.ObjectId
  chats   Chat[]   @relation(fields: [chatIds], references: [id])

  messages Message[]
  flick    Flick[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String    @db.ObjectId
  caption   String
  comments  Comment[]
  shares    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  assets    String[]
  altText   String
  hashtags  String?
  saves     Save[]    @relation("PostSaves")
  likes     Like[]    @relation("PostLikes")

  @@index([authorId])
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId        String    @db.ObjectId
  postId          String    @db.ObjectId
  content         String
  parentCommentId String?   @db.ObjectId
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("CommentReplies")
  commentLikes    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  Post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  flick     Flick?   @relation("FlickLikes", fields: [flickId], references: [id])
  flickId   String?  @db.ObjectId

  @@unique([postId, userId])
  @@index([userId])
}

model Save {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation("PostSaves", fields: [postId], references: [id], onDelete: Cascade)
  flickId   String?  @db.ObjectId
  flick     Flick?   @relation(fields: [flickId], references: [id])

  @@unique([postId, userId])
  @@index([userId])
}

model Follows {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String   @db.ObjectId
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Chat {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String
  image         String

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  creatorId String @db.ObjectId

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Flick {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  caption   String
  plays     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  videoUrl  String
  altText   String
  hashtags  String?
  likes     Like[]   @relation("FlickLikes")
  saves     Save[]

  @@index([authorId])
}
